
var geometry = g1;// substitute with your study area polygon.

// function to filter sentinel image based on cloud cover, you can change cloud percentage
function rmCloudByQA(image) {
  var qa = image.select('QA60');
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
               .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
  return image.updateMask(mask);
}


//function to calculate NDWI
function NDWI(image) {
  return image.addBands(image.normalizedDifference(["B3", "B8"]).rename("NDWI"));
}


//filtering S2 optical image and taking median of year 2020 and calculate NDWI

var s2 = ee.ImageCollection("COPERNICUS/S2_SR")
  .filterDate("2020-01-01", "2020-12-31")
  .filterBounds(geometry)
  .filter(ee.Filter.lt("CLOUDY_PIXEL_PERCENTAGE", 20))
  .map(rmCloudByQA)
  .map(NDWI);
  
//Get mean NDWI image for year 2020 and clip it to study area
var ndwiImage = s2.select("NDWI").mean().clip(geometry);
Map.addLayer(ndwiImage, {min: -1, max: 1, palette: ['brown', 'white', 'blue']}, 'NDWI');

// threshold to mask low NDWI values
var ndwiThreshold = ndwiImage.gt(0.06).rename("NDWI_thresh");
var ndwiMasked = ndwiImage.updateMask(ndwiThreshold);

Map.addLayer(ndwiMasked,{},'NDWI Image'); // dispaying NDWI image

var ndwiThreshold = 0.06;//threshold value is different for different region
var binary = ndwiImage.gt(ndwiThreshold).selfMask();

Map.addLayer(binary, {}, 'NDWI > 0.06'); 

//Vectorize (need integer image for reduceToVectors)
var intImage = binary.multiply(1).toByte();

//vectorizing to remove streams detected as aquaculture
var vectors = intImage.reduceToVectors({
  geometry: geometry,
  scale: 10,
  geometryType: 'polygon',
  labelProperty: 'class',
  reducer: ee.Reducer.countEvery(),
  maxPixels: 1e10
});

Map.addLayer(vectors, {color: 'green'}, 'All NDWI polygons');

// Simplify geometries to reduce complexity
var simplified = vectors.map(function(f) {
  return f.setGeometry(f.geometry().simplify(1)); // 1 meter tolerance
});

// Calculate area & shape index (compactness)
var enriched = simplified.map(function(f) {
  var geom = f.geometry();
  var area = geom.area(1);
  var perimeter = geom.perimeter(1);
  var shapeIndex = ee.Number(4).multiply(Math.PI).multiply(area)
    .divide(perimeter.multiply(perimeter));
  return f.set({'area': area, 'shapeIndex': shapeIndex});
});

//  Filter large water bodies and irregular shapes (like rivers)
var filtered = enriched
  .filter(ee.Filter.lt('area', 500000))          // < 50 hectares
  .filter(ee.Filter.gt('shapeIndex', 0.2));     // To avoid linear shapes
  
// Total area in square meters
var totalArea = filtered.aggregate_sum('area');
print('Total Aquaculture Area (sq. meters):', totalArea);

// Optional: convert to hectares
var totalAreaHa = ee.Number(totalArea).divide(10000);
print('Total Aquaculture Area (hectares):', totalAreaHa);

Map.addLayer(filtered, {color: 'red'}, 'Filtered Aquaculture Ponds');
